#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
set -o pipefail
set -o errtrace

SCRIPTNAME="$(basename "$BASH_SOURCE")"

error_handler() {
   local exit_code="$?"

   local MSG="\
###############################################################################
## $SCRIPTNAME script bug.
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
##
## Experts only:
## $SCRIPTNAME --verbose
## for verbose output. Clean the output and
## submit to Whonix developers.
###############################################################################\
"
   echo "$MSG"
   exit 1
}

trap "error_handler" ERR

preparation() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/037
   ## Variables for terminal requests.
   [[ -t 2 ]] && {
       alt=$(      tput smcup  || tput ti      ) # Start alt display
       ealt=$(     tput rmcup  || tput te      ) # End   alt display
       hide=$(     tput civis  || tput vi      ) # Hide cursor
       show=$(     tput cnorm  || tput ve      ) # Show cursor
       save=$(     tput sc                     ) # Save cursor
       load=$(     tput rc                     ) # Load cursor
       bold=$(     tput bold   || tput md      ) # Start bold
       stout=$(    tput smso   || tput so      ) # Start stand-out
       estout=$(   tput rmso   || tput se      ) # End stand-out
       under=$(    tput smul   || tput us      ) # Start underline
       eunder=$(   tput rmul   || tput ue      ) # End   underline
       reset=$(    tput sgr0   || tput me      ) # Reset cursor
       blink=$(    tput blink  || tput mb      ) # Start blinking
       italic=$(   tput sitm   || tput ZH      ) # Start italic
       eitalic=$(  tput ritm   || tput ZR      ) # End   italic
   [[ $TERM != *-m ]] && {
       red=$(      tput setaf 1|| tput AF 1    )
       green=$(    tput setaf 2|| tput AF 2    )
       yellow=$(   tput setaf 3|| tput AF 3    )
       blue=$(     tput setaf 4|| tput AF 4    )
       magenta=$(  tput setaf 5|| tput AF 5    )
       cyan=$(     tput setaf 6|| tput AF 6    )
   }
       white=$(    tput setaf 7|| tput AF 7    )
       default=$(  tput op                     )
       eed=$(      tput ed     || tput cd      )   # Erase to end of display
       eel=$(      tput el     || tput ce      )   # Erase to end of line
       ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
       ewl=$eel$ebl                                # Erase whole line
       draw=$(     tput -S <<< '   enacs
                                   smacs
                                   acsc
                                   rmacs' || { \
                   tput eA; tput as;
                   tput ac; tput ae;         } )   # Drawing characters
       back=$'\b'
   } 2>/dev/null ||:

   [ -n "$codename_default_stable" ] || codename_default_stable="jessie"
   ## Fallback.
   [ -n "$WHONIX_APT_REPOSITORY_BASEURI" ] || WHONIX_APT_REPOSITORY_BASEURI="http://deb.whonix.org"
}

root_check() {
   if [ "$(id -u)" != "0" ]; then
      echo "ERROR: This must be run as root (sudo)!"
      exit 1
   else
      true "INFO: Script running as root."
   fi
}

sanity_tests() {
   command -v clear >/dev/null
   command -v apt-key >/dev/null
   command -v id >/dev/null
   command -v mkdir >/dev/null
   command -v mktemp >/dev/null
   command -v awk >/dev/null
}

parse_cmd_options() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   local HELP_MSG="See:
man $SCRIPTNAME"

   while :
   do
       case $1 in
           -h | --help | -\?)
               echo "$HELP_MSG"
               exit 0
               ;;
           -v | --verbose)
               echo "$SCRIPTNAME verbose output..."
               set -x
               VERBOSE="1"
               shift
               ;;
           -e | --enable)
               enable="1"
               shift
               ;;
           -d | --disable)
               disable="1"
               shift
               ;;
           --refresh-keys)
               refresh_keys="1"
               shift
               ;;
           -c | --codename)
               codename="$2"
               if [ "$codename" = "" ]; then
                  echo "ERROR: codename may not be empty! You most likely want to use $codename_default_stable, ${codename_default_stable}-proposed-updates, testers or developers as codename."
                  exit 1
               fi
               shift 2
               ;;
           -r | --repository)
               repository="$2"
               if [ "$repository" = "" ]; then
                  echo "ERROR: repository may not be empty! You most likely want to use stable, stable-proposed-updates, testers or developers as repository."
                  exit 1
               fi
               shift 2
               ;;
           -b | --baseuri)
               WHONIX_APT_REPOSITORY_BASEURI="$2"
               if [ "$WHONIX_APT_REPOSITORY_BASEURI" = "" ]; then
                  echo "ERROR: WHONIX_APT_REPOSITORY_BASEURI may not be empty!"
                  exit 1
               fi
               shift 2
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
}

add_keys() {
   local key

   for key in "$1"*; do
      local filename
      filename="$(basename "$key")"
      if [ "$filename" = "placeholder" ]; then
         continue
      fi
      if [ "$filename" = "*" ]; then
         ## Folder is empty.
         continue
      fi
      echo "INFO $BASH_SOURCE: Adding key: $key..."
      apt-key add "$key" #>/dev/null 2>/dev/null
   done
}

revoke_or_refresh_keys() {
   gpg_tmp="$(mktemp --directory)"

   rm --recursive --force "$gpg_tmp"
   mkdir --parents "$gpg_tmp"
   chmod 700 "$gpg_tmp"

   local key

   for key in "$1"*; do
      filename="$(basename "$key")"
      if [ "$filename" = "placeholder" ]; then
         continue
      fi
      if [ "$filename" = "*" ]; then
         ## Folder is empty.
         continue
      fi
      gpg \
         --no-options \
         --homedir "$gpg_tmp" \
         --no-default-keyring \
         --import "$key" \
         2>/dev/null
   done

   local fingerprint

   for fingerprint in $(\
      gpg \
         --no-options \
         --homedir "$gpg_tmp" \
         --no-default-keyring \
         --with-colons \
         --fingerprint \
         2>/dev/null \
         | awk -F: '$1 == "fpr" {print $10;}' \
         ); do
            ## apt-key del requires the 7 trailing chars of a fingerprint.
            local fingerprint_trailing_seven
            fingerprint_trailing_seven="${fingerprint:(-8)}"
            local apt_key_exit_code
            apt_key_exit_code="0"
            if [ "$disable" = "1" ]; then
               echo "INFO $BASH_SOURCE: Removing revoked key with fingerprint $fingerprint (fingerprint_trailing_seven: $fingerprint_trailing_seven)..."
               apt-key del "$fingerprint_trailing_seven" || { apt_key_exit_code="$?" ; true; };
               if [ "$apt_key_exit_code" = "0" ]; then
                  true "INFO $BASH_SOURCE: apt-key returned 0."
               elif [ "$apt_key_exit_code" = "2" ]; then
                  ## For Ubuntu / CI compatibility.
                  ## Ubuntu uses a different version of apt(-key).
                  true "INFO $BASH_SOURCE: apt-key returned 2. (Key not removed, because not there. Probably already removed or never existed.)"
               else
                  error "ERROR $BASH_SOURCE: Unexpected apt-key return code: $apt_key_exit_code. Please report this Whonix Bug!"
               fi
            elif [ "$refresh_keys" = "1" ]; then
               apt-key adv --fingerprint "$fingerprint" || { apt_key_exit_code="$?" ; true; };
               if [ "$apt_key_exit_code" = "0" ]; then
                  true "INFO $BASH_SOURCE: apt-key returned 0. Updating keys."
                  add_keys "/usr/share/whonix/whonix-keys.d/"
               else
                  true "INFO $BASH_SOURCE: apt-key returned $apt_key_exit_code. Not updating keys."
               fi
            else
               error "Neither disable nor refresh_keys."
            fi
   done

   if [ -d "$gpg_tmp" ]; then
      rm --recursive "$gpg_tmp"
   fi
}

parse_variables() {
   if [ "$disable" = "1" ]; then
      return 0
   fi
   if [ "$refresh_keys" = "1" ]; then
      return 0
   fi


   if [ "$codename" = "" ]; then
      if [ "$repository" = "stable" ]; then
         codename="$codename_default_stable"
      elif [ "$repository" = "stable-proposed-updates" ]; then
         codename="${codename_default_stable}-proposed-updates"
      elif [ "$repository" = "testers" ]; then
         codename="testers"
      elif [ "$repository" = "developers" ]; then
         codename="developers"
      else
         echo "ERROR: --repository must be either stable, stable-proposed-updates, testers or developers."
         exit 1
      fi
   fi
}

main_function() {
   root_check
   sanity_tests
   preparation
   parse_cmd_options ${1+"$@"}
   parse_variables

   if [ "$disable" = "1" ]; then
      echo "INFO $BASH_SOURCE: Revoking all Whonix apt keys in /usr/share/whonix/whonix-keys.d/*..."
      revoke_or_refresh_keys "/usr/share/whonix/whonix-keys.d/"
      echo "INFO $BASH_SOURCE: Revoking all Whonix apt keys in /usr/share/whonix/whonix-keys-revoked.d/*..."
      revoke_or_refresh_keys "/usr/share/whonix/whonix-keys-revoked.d/"
      echo "INFO $BASH_SOURCE: Revoked all Whonix apt keys. Feel free to manually verify using \"sudo apt-key finger\". Showing output of \"apt-key finger\"..."
      echo " "
   elif [ "$enable" = "1" ]; then
      echo "INFO $BASH_SOURCE: Adding all Whonix apt keys in /usr/share/whonix/keys/whonix-keys/*..."
      add_keys "/usr/share/whonix/whonix-keys.d/"
      echo "INFO $BASH_SOURCE: Revoking all Whonix apt keys in /usr/share/whonix/whonix-keys-revoked.d/*..."
      revoke_or_refresh_keys "/usr/share/whonix/whonix-keys-revoked.d/"
      echo "INFO $BASH_SOURCE: Added all Whonix apt keys from /usr/share/whonix/keys/whonix-keys/* and \
revoked all Whonix apt keys from /usr/share/whonix/whonix-keys-revoked.d/*. \
Feel free to manually verify using \"sudo apt-key finger\". Showing output of \"apt-key finger\"..."
      echo " "
   elif [ "$refresh_keys" = "1" ]; then
      revoke_or_refresh_keys "/usr/share/whonix/whonix-keys.d/"
   else
      echo "ERROR: You must use either --enable or --disable."
      exit 1
   fi

   apt-key finger

   if [ "$disable" = "1" ]; then
      if [ -f "/etc/apt/sources.list.d/whonix.list" ]; then
         echo "INFO $BASH_SOURCE: Deleting Whonix apt repository /etc/apt/sources.list.d/whonix.list..."
         rm --force "/etc/apt/sources.list.d/whonix.list"
         echo "INFO $BASH_SOURCE: Done, deleted /etc/apt/sources.list.d/whonix.list."
      else
         echo "INFO $BASH_SOURCE: Ok, /etc/apt/sources.list.d/whonix.list does not exist."
      fi
   elif [ "$refresh_keys" = "1" ]; then
      true
   else
      echo "INFO $BASH_SOURCE: Using distribution ${under}$codename${reset} (version of Whonix) as apt repository."
      echo "INFO $BASH_SOURCE: Creating /etc/apt/sources.list.d/whonix.list..."

      echo "\
## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Whonix /etc/apt/sources.list.d/whonix.list

## This file has been automatically created by /usr/bin/whonix_repository.
## If you make manual changes to it, your changes get lost next time you run
## the whonix_repository tool.
## You can conveniently manage this file, using the whonix_repository tool.
## For any modifications (delete this file, use stable version, use testers
## version or use developers version), please use the whonix_repository tool.
## Run:
##    sudo whonix_repository

deb $WHONIX_APT_REPOSITORY_BASEURI $codename main

## Leaving source line disabled by default to safe some time, it's not useful
## anyway, since it's better to get the source code from the git repository.
#deb-src $WHONIX_APT_REPOSITORY_BASEURI $codename main

## End of /etc/apt/sources.list.d/whonix.list
" > "/etc/apt/sources.list.d/whonix.list"

      cat "/etc/apt/sources.list.d/whonix.list"
      echo "INFO $BASH_SOURCE: Done, created /etc/apt/sources.list.d/whonix.list."
   fi

   sync
}

main_function ${1+"$@"}
